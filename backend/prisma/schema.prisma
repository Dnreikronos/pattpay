generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Payer {
  id            String   @id @default(uuid()) @db.Uuid
  walletAddress String   @unique @map("wallet_address")
  name          String
  email         String?
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  subscriptions Subscription[]

  @@map("payers")
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  EXPIRED
}

model Subscription {
  id                  String             @id @default(uuid()) @db.Uuid
  planId              String             @map("plan_id") @db.Uuid
  payerId             String             @map("payer_id") @db.Uuid
  token_mint          String             @map("token_mint")
  status              SubscriptionStatus @default(ACTIVE)
  nextDueAt           DateTime           @map("next_due_at")
  lastPaidAt          DateTime           @map("last_paid_at")
  delegateAuthority   String?            @map("delegate_authority")
  delegateTxSignature String?            @map("delegate_tx_signature")
  delegateApprovedAt  DateTime?          @map("delegate_approved_at")
  tokenDecimals       Int                @map("token_decimals")
  totalApprovedAmount Decimal            @map("total_approved_amount")
  createdAt           DateTime           @default(now()) @map("created_at")
  updatedAt           DateTime           @updatedAt @map("updated_at")

  // receiverTokenAccount String? @map("receiver_token_account")

  payer Payer @relation(fields: [payerId], references: [id], onDelete: Cascade)
  plan  Plan  @relation(fields: [planId], references: [id], onDelete: Cascade)

  relayerJobs RelayerJob[]

  @@map("subscriptions")
}

model Plan {
  id             String   @id @default(uuid()) @db.Uuid
  receiverId     String   @map("receiver_id") @db.Uuid
  name           String   @map("name")
  description    String?  @map("description")
  durationMonths Int      @map("duration_months")
  periodSeconds  Int      @map("period_seconds")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  receiver Receiver @relation(fields: [receiverId], references: [id])

  subscriptions Subscription[]
  planTokens    PlanToken[]

  @@map("plans")
}

model Receiver {
  id               String   @id @default(uuid()) @db.Uuid
  walletAddress    String   @unique @map("wallet_address")
  name             String   @map("name")
  description      String?  @map("description")
  tokenAccountUSDT String   @map("token_account_usdt")
  tokenAccountUSDC String   @map("token_account_usdc")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  plans Plan[]

  @@map("receivers")
}

model PlanToken {
  id            String   @id @default(uuid()) @db.Uuid
  planId        String   @db.Uuid
  tokenDecimals Int      @map("token_decimals")
  tokenMint     String   @map("token_mint")
  price         Decimal  @map("price")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  plan Plan @relation(fields: [planId], references: [id], onDelete: Cascade)

  @@map("plan_tokens")
}

enum RelayerJobStatus {
  PENDING
  SUCCESS
  FAILED
}

model RelayerJob {
  id             String           @id @default(uuid()) @db.Uuid
  subscriptionId String           @map("subscription_id") @db.Uuid
  nextRetryAt    DateTime         @map("next_retry_at")
  executedAt     DateTime?        @map("executed_at")
  status         RelayerJobStatus @default(PENDING)

  subscription Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@map("relayer_jobs")
}

enum PaymentExecutionStatus {
  SUCCESS
  FAILED
}

model PaymentExecution {
  id             String                 @id @default(uuid()) @db.Uuid
  subscriptionId String                 @map("subscription_id") @db.Uuid
  txSignature    String                 @map("tx_signature")
  executedBy     String?                @map("executed_by")
  status         PaymentExecutionStatus
  executedAt     DateTime               @map("executed_at")
  errorMessage   String?                @map("error_message")
  tokenMint      String                 @map("token_mint")
  amount         Decimal                @map("amount")

  @@map("payment_executions")
}
